service: image-reader

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  environment:
    COLLECTION_ID_INDEX_NAME: IXCollectionById
    COLLECTION_TABLE_NAME: Collections
    USER_INDEX_NAME: IXCollectionsCreatedByUser

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

custom:
  serverless-offline:
    httpPort: 3003
  
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

  documentation:
    api:
      info:
        version: v1.0.0
        title: Image Reader API
        description: Serverless Image Reader API
    models:
      - name: CollectionRequest
        contentType: application/json
        schema: ${file(validators/collection-request.json)}

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function


functions:
  createImageCollection:
    handler: src/lambda/http/collections/create.handler
    events:
      - http:
          method: post
          path: collections
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Creates a new image collection 
            description: Create a new image collection in a specified category for the authenticated user
            requestModels:
              'application/json': CollectionRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTION_TABLE_NAME}

  SingleUserImageCollection:
    handler: src/lambda/http/collections/single.handler
    events:
      - http:
          method: get
          path: collections/{id}
          cors: true
          documentation:
            summary: Fetch user image collection 
            description: Fetch user image collection for the authenticated user by id
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTION_TABLE_NAME}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTION_TABLE_NAME}/index/${self:provider.environment.COLLECTION_ID_INDEX_NAME}

  ListUserImageCollection:
    handler: src/lambda/http/collections/list.handler
    events:
      - http:
          method: get
          path: collections
          cors: true
          documentation:
            summary: List user's image collection 
            description: List user's image collection for the authenticated user
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTION_TABLE_NAME}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTION_TABLE_NAME}/index/${self:provider.environment.USER_INDEX_NAME}

  updateImageCollection:
    handler: src/lambda/http/collections/update.handler
    events:
      - http:
          method: put
          path: collections/{id}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an image collection 
            description: Update an image collection for the authenticated user
            requestModels:
              'application/json': CollectionRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTION_TABLE_NAME}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTION_TABLE_NAME}/index/${self:provider.environment.COLLECTION_ID_INDEX_NAME}

  deleteImageCollection:
    handler: src/lambda/http/collections/delete.handler
    events:
      - http:
          method: delete
          path: collections/{id}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Delete an image collection 
            description: Delete an image collection for the authenticated user
            requestModels:
              'application/json': CollectionRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTION_TABLE_NAME}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTION_TABLE_NAME}/index/${self:provider.environment.COLLECTION_ID_INDEX_NAME}
            

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    CollectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.COLLECTION_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.COLLECTION_ID_INDEX_NAME}
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - userId
              ProjectionType: INCLUDE
                
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: image-reader
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '1'

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  environment:
    COLLECTION_ID_INDEX_NAME: IXCollectionById
    COLLECTION_TABLE_NAME: Collections
    USER_INDEX_NAME: IXCollectionsCreatedByUser

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

custom:
  serverless-offline:
    httpPort: 3003
  
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

  documentation:
    api:
      info:
        version: v1.0.0
        title: Image Reader API
        description: Serverless Image Reader API
    models:
      - name: CollectionRequest
        contentType: application/json
        schema: ${file(validators/collection-request.json)}

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

functions:
  createImageCollection:
    handler: src/lambda/http/collections/create.handler
    events:
      - http:
          method: post
          path: collections
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Creates a new image collection 
            description: Create a new image collection in a specified category for the authenticated user
            requestModels:
              'application/json': CollectionRequest

  SingleUserImageCollection:
    handler: src/lambda/http/collections/single.handler
    events:
      - http:
          method: get
          path: collections/{id}
          cors: true
          documentation:
            summary: Fetch user image collection 
            description: Fetch user image collection for the authenticated user by id

  ListUserImageCollection:
    handler: src/lambda/http/collections/list.handler
    events:
      - http:
          method: get
          path: collections
          cors: true
          documentation:
            summary: List user's image collection 
            description: List user's image collection for the authenticated user

  updateImageCollection:
    handler: src/lambda/http/collections/update.handler
    events:
      - http:
          method: put
          path: collections/{id}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an image collection 
            description: Update an image collection for the authenticated user
            requestModels:
              'application/json': CollectionRequest

  deleteImageCollection:
    handler: src/lambda/http/collections/delete.handler
    events:
      - http:
          method: delete
          path: collections/{id}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Delete an image collection 
            description: Delete an image collection for the authenticated user
            requestModels:
              'application/json': CollectionRequest
            

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    CollectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.COLLECTION_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.COLLECTION_ID_INDEX_NAME}
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - userId
              ProjectionType: INCLUDE
                
        

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
